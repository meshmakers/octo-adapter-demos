name: $(MajorVersion).$(MinorVersion).$(date:yyMM).$(DayOfMonth)$(rev:rrr)-$(Build.SourceBranchName)

trigger:
  batch: true
  branches:
    include:
      - dev/*
      - test/*
      - main
  tags:
    exclude:
      - '*'

variables:
  - group: ApiKeys-mm-cloud
  - group: OctoDefault
  - name: solutionFile
    value: 'Octo.AdapterDemos.sln'
  - name: artifactsFrameworkVersion
    value: 'net9.0'
  - name: buildConfiguration
    value: 'Release'
  - name: buildPlatform
    value: 'Any CPU'
  - name: isRelease
    value: ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/r') }}
  - name: isMain
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}    
  - name: isTest
    value: ${{ startsWith(variables['Build.SourceBranch'], 'refs/heads/test') }}

stages:
 - stage: Build
   jobs:
     - job: local_build
       displayName: "Build nuget and execute tests"
       pool:
         name: meshmakers-ci-agents
       steps:
         - template: update-build-number.yml
         - checkout: self
           clean: true
         - template: set-version.yml
         - template: download-ca.yml
         - task: DotNetCoreCLI@2
           displayName: 'Restore NuGet packages'
           inputs:
             command: 'restore'
             projects: '$(SolutionFile)'
             restoreArguments: '--force /p:OctoNugetPrivateServer=$(nugetPrivateServer)'
             noCache: true
         - task: DotNetCoreCLI@2
           displayName: 'Test'
           inputs:
             command: 'test'
             projects: |
               '**/*Tests.csproj'
               !'**/*SystemTests.csproj'
             testRunTitle: 'CI'
         - template: build-and-push-docker-image.yml
           parameters:
             PublicRegistryServiceConnection: $(DockerRegistryPublicConnection)
             Repository: meshmakers/octo-communication-edge-adapter-demo
             Dockerfile: src/AdapterEdgeDemo/Dockerfile
             Architecture: 'linux/arm64,linux/amd64'
             PrivateRegistryName: $(DockerRegistryPrivateUri)
         - template: build-and-push-docker-image.yml
           parameters:
             PublicRegistryServiceConnection: $(DockerRegistryPublicConnection)
             Repository: meshmakers/octo-communication-mesh-adapter-demo
             Dockerfile: src/AdapterMeshDemo/Dockerfile
             Architecture: 'linux/arm64,linux/amd64'
             PrivateRegistryName: $(DockerRegistryPrivateUri)
         - template: handle-artifacts.yml

     

